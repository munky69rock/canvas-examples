// Generated by CoffeeScript 1.6.3
(function() {
  var BOID_SIZE, FPS, MAX_SPPED, NUM_BOIDS, SCREEN_SIZE, boids, canvas, ctx, draw, getDistance, move, rule1, rule2, rule3, simulate;

  FPS = 30;

  SCREEN_SIZE = 500;

  NUM_BOIDS = 100;

  BOID_SIZE = 5;

  MAX_SPPED = 7;

  canvas = document.getElementById('world');

  ctx = canvas.getContext('2d');

  boids = [];

  window.onload = function() {
    var i, _i;
    canvas.width = canvas.height = SCREEN_SIZE;
    ctx.fillStyle = 'rgba(33,33,33,0.8)';
    for (i = _i = 0; 0 <= NUM_BOIDS ? _i < NUM_BOIDS : _i > NUM_BOIDS; i = 0 <= NUM_BOIDS ? ++_i : --_i) {
      boids[i] = {
        x: Math.random() * SCREEN_SIZE,
        y: Math.random() * SCREEN_SIZE,
        vx: 0,
        vy: 0
      };
    }
    setInterval(simulate, 1000 / FPS);
  };

  simulate = function() {
    draw();
    return move();
  };

  draw = function() {
    var i, _i, _ref, _results;
    ctx.clearRect(0, 0, SCREEN_SIZE, SCREEN_SIZE);
    _results = [];
    for (i = _i = 0, _ref = boids.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(ctx.fillRect(boids[i].x - BOID_SIZE / 2, boids[i].y - BOID_SIZE / 2, BOID_SIZE, BOID_SIZE));
    }
    return _results;
  };

  move = function() {
    var b, i, r, speed, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = boids.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      rule1(i);
      rule2(i);
      rule3(i);
      b = boids[i];
      speed = Math.sqrt(Math.pow(b.vx, 2) + Math.pow(b.vy, 2));
      if (speed >= MAX_SPPED) {
        r = MAX_SPPED / speed;
        b.vx *= r;
        b.vy *= r;
      }
      if ((b.x < 0 && b.vx < 0) || (b.x > SCREEN_SIZE && b.vx > 0)) {
        b.vx *= -1;
      }
      if ((b.y < 0 && b.vy < 0) || (b.y > SCREEN_SIZE && b.vy > 0)) {
        b.vy *= -1;
      }
      b.x += b.vx;
      _results.push(b.y += b.vy);
    }
    return _results;
  };

  rule1 = function(index) {
    var c, i, _i, _ref;
    c = {
      x: 0,
      y: 0
    };
    for (i = _i = 0, _ref = boids.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!(i !== index)) {
        continue;
      }
      c.x += boids[i].x;
      c.y += boids[i].y;
    }
    c.x /= boids.length - 1;
    c.y /= boids.length - 1;
    boids[index].vx += (c.x - boids[index].x) / 100;
    return boids[index].vy += (c.y - boids[index].y) / 100;
  };

  rule2 = function(index) {
    var d, i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = boids.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!(i !== index)) {
        continue;
      }
      d = getDistance(boids[i], boids[index]);
      if (d < 5) {
        boids[index].vx -= boids[i].x - boids[index].x;
        _results.push(boids[index].vy -= boids[i].y - boids[index].y);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  rule3 = function(index) {
    var i, pv, _i, _ref;
    pv = {
      x: 0,
      y: 0
    };
    for (i = _i = 0, _ref = boids.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!(i !== index)) {
        continue;
      }
      pv.x += boids[i].vx;
      pv.y += boids[i].vy;
    }
    pv.x /= boids.length - 1;
    pv.y /= boids.length - 1;
    boids[index].vx += (pv.x - boids[index].vx) / 8;
    return boids[index].vy += (pv.y - boids[index].vy) / 8;
  };

  getDistance = function(b1, b2) {
    var x, y;
    x = b1.x - b2.x;
    y = b1.y - b2.y;
    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
  };

}).call(this);
